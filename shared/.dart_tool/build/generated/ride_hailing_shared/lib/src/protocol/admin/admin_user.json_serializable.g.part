// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

AdminUser _$AdminUserFromJson(Map<String, dynamic> json) => AdminUser(
      id: (json['id'] as num?)?.toInt(),
      userId: (json['userId'] as num).toInt(),
      role: $enumDecode(_$AdminRoleEnumMap, json['role']),
      permissions: (json['permissions'] as List<dynamic>?)
              ?.map((e) => $enumDecode(_$AdminPermissionEnumMap, e))
              .toList() ??
          const [],
      assignedAt: DateTime.parse(json['assignedAt'] as String),
      assignedBy: (json['assignedBy'] as num?)?.toInt(),
      isActive: json['isActive'] as bool? ?? true,
      lastLoginAt: json['lastLoginAt'] == null
          ? null
          : DateTime.parse(json['lastLoginAt'] as String),
      department: json['department'] as String?,
      notes: json['notes'] as String?,
    );

Map<String, dynamic> _$AdminUserToJson(AdminUser instance) => <String, dynamic>{
      'id': instance.id,
      'userId': instance.userId,
      'role': _$AdminRoleEnumMap[instance.role]!,
      'permissions': instance.permissions
          .map((e) => _$AdminPermissionEnumMap[e]!)
          .toList(),
      'assignedAt': instance.assignedAt.toIso8601String(),
      'assignedBy': instance.assignedBy,
      'isActive': instance.isActive,
      'lastLoginAt': instance.lastLoginAt?.toIso8601String(),
      'department': instance.department,
      'notes': instance.notes,
    };

const _$AdminRoleEnumMap = {
  AdminRole.superAdmin: 'superAdmin',
  AdminRole.admin: 'admin',
  AdminRole.moderator: 'moderator',
  AdminRole.support: 'support',
  AdminRole.analyst: 'analyst',
  AdminRole.readonly: 'readonly',
};

const _$AdminPermissionEnumMap = {
  AdminPermission.all: 'all',
  AdminPermission.userManagement: 'userManagement',
  AdminPermission.driverManagement: 'driverManagement',
  AdminPermission.rideManagement: 'rideManagement',
  AdminPermission.paymentManagement: 'paymentManagement',
  AdminPermission.disputeResolution: 'disputeResolution',
  AdminPermission.systemConfig: 'systemConfig',
  AdminPermission.reports: 'reports',
  AdminPermission.analytics: 'analytics',
  AdminPermission.supportTickets: 'supportTickets',
  AdminPermission.notifications: 'notifications',
  AdminPermission.auditLogs: 'auditLogs',
};

DashboardStats _$DashboardStatsFromJson(Map<String, dynamic> json) =>
    DashboardStats(
      id: (json['id'] as num?)?.toInt(),
      totalUsers: (json['totalUsers'] as num).toInt(),
      totalDrivers: (json['totalDrivers'] as num).toInt(),
      totalPassengers: (json['totalPassengers'] as num).toInt(),
      activeDrivers: (json['activeDrivers'] as num).toInt(),
      onlineDrivers: (json['onlineDrivers'] as num).toInt(),
      totalRides: (json['totalRides'] as num).toInt(),
      completedRides: (json['completedRides'] as num).toInt(),
      cancelledRides: (json['cancelledRides'] as num).toInt(),
      ongoingRides: (json['ongoingRides'] as num).toInt(),
      totalRevenue: (json['totalRevenue'] as num).toDouble(),
      todayRevenue: (json['todayRevenue'] as num).toDouble(),
      averageRating: (json['averageRating'] as num).toDouble(),
      totalDisputes: (json['totalDisputes'] as num).toInt(),
      pendingDisputes: (json['pendingDisputes'] as num).toInt(),
      calculatedAt: DateTime.parse(json['calculatedAt'] as String),
      additionalMetrics: json['additionalMetrics'] as Map<String, dynamic>?,
    );

Map<String, dynamic> _$DashboardStatsToJson(DashboardStats instance) =>
    <String, dynamic>{
      'id': instance.id,
      'totalUsers': instance.totalUsers,
      'totalDrivers': instance.totalDrivers,
      'totalPassengers': instance.totalPassengers,
      'activeDrivers': instance.activeDrivers,
      'onlineDrivers': instance.onlineDrivers,
      'totalRides': instance.totalRides,
      'completedRides': instance.completedRides,
      'cancelledRides': instance.cancelledRides,
      'ongoingRides': instance.ongoingRides,
      'totalRevenue': instance.totalRevenue,
      'todayRevenue': instance.todayRevenue,
      'averageRating': instance.averageRating,
      'totalDisputes': instance.totalDisputes,
      'pendingDisputes': instance.pendingDisputes,
      'calculatedAt': instance.calculatedAt.toIso8601String(),
      'additionalMetrics': instance.additionalMetrics,
    };

SurgeConfig _$SurgeConfigFromJson(Map<String, dynamic> json) => SurgeConfig(
      id: (json['id'] as num?)?.toInt(),
      configId: json['configId'] as String,
      name: json['name'] as String,
      isActive: json['isActive'] as bool? ?? true,
      baseSurgeMultiplier: (json['baseSurgeMultiplier'] as num).toDouble(),
      maxSurgeMultiplier: (json['maxSurgeMultiplier'] as num).toDouble(),
      demandThreshold: (json['demandThreshold'] as num).toInt(),
      driverThreshold: (json['driverThreshold'] as num).toInt(),
      applicableAreas: (json['applicableAreas'] as List<dynamic>?)
              ?.map((e) => e as String)
              .toList() ??
          const [],
      applicableRideTypes: (json['applicableRideTypes'] as List<dynamic>?)
              ?.map((e) => e as String)
              .toList() ??
          const [],
      timeRules: json['timeRules'] as Map<String, dynamic>? ?? const {},
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: json['updatedAt'] == null
          ? null
          : DateTime.parse(json['updatedAt'] as String),
      updatedBy: (json['updatedBy'] as num?)?.toInt(),
    );

Map<String, dynamic> _$SurgeConfigToJson(SurgeConfig instance) =>
    <String, dynamic>{
      'id': instance.id,
      'configId': instance.configId,
      'name': instance.name,
      'isActive': instance.isActive,
      'baseSurgeMultiplier': instance.baseSurgeMultiplier,
      'maxSurgeMultiplier': instance.maxSurgeMultiplier,
      'demandThreshold': instance.demandThreshold,
      'driverThreshold': instance.driverThreshold,
      'applicableAreas': instance.applicableAreas,
      'applicableRideTypes': instance.applicableRideTypes,
      'timeRules': instance.timeRules,
      'createdAt': instance.createdAt.toIso8601String(),
      'updatedAt': instance.updatedAt?.toIso8601String(),
      'updatedBy': instance.updatedBy,
    };
